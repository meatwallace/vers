---
description: HTTP Services Testing Standards
globs: "projects/service-*/src/handlers/*.test.ts"
alwaysApply: false
---

# Service Testing Standards

Standards for testing HTTP service handlers.

<rule>
name: testing_standards_http_services
description: Standards for testing HTTP services
filters:
  - type: file_path
    pattern: ".*/handlers/.*\\.test\\.ts$"

actions:
  - type: suggest
    message: |
      Service Testing Standards:

      1. Test Setup:
         - Create reusable `setupTest` function per handler
         - Return trpc `caller` and any other test-specific setup
         - Use type-safe test utilities
         - Use `await using` pattern for automatic resource cleanup
         - Reset mocks in `afterEach`

      2. Handler Testing:
         - Test happy path with full data
         - Test partial updates where applicable
         - Verify both result and persisted data
         - Test validation and constraints
         - Check error responses
         - Verify timestamps and audit fields

examples:
  - input: |
      ```ts
      // Bad - poor test structure and setup
      test('create user works', async () => {
        const db = getDB();

        const res = handle({ email: 'test@test.com' }, db);

        expect(res).toBe({ success: true });
      });

      // Good - proper service handler testing
      import { Hono } from 'hono';
      import * as schema from '@vers/postgres-schema';
      import { createTestDB, createTestUser } from '@vers/service-test-utils';
      import { PostgresJsDatabase } from 'drizzle-orm/postgres-js';
      import { router } from '../router';
      import { t } from '../t';

      const createCaller = t.createCallerFactory(router);

      interface TestConfig {
        db: PostgresJsDatabase<typeof schema>;
      }

      function setupTest(config: TestConfig) {
        const caller = createCaller({ db: config.db });
        return { caller };
      }

      test('it creates a user with a hashed password', async () => {
        // Good - use await using pattern for automatic cleanup
        await using handle = await createTestDB();
        
        const { db } = handle;
        
        const { caller } = setupTest({ db });

        const password = 'password123';

        const result = await caller.createUser({
          email: 'user@test.com',
          name: 'Test User',
          username: 'test_user',
          password,
        });

        // Good - verify the response data
        expect(result).toStrictEqual({
          id: expect.any(String),
          email: 'user@test.com',
          name: 'Test User',
          username: 'test_user',
          createdAt: expect.any(String),
          updatedAt: expect.any(String),
        });

        // Good - verify any persisted data is created, changed, or deleted
        const user = await db.query.users.findFirst({
          where: (users, { eq }) => eq(users.email, 'user@test.com'),
        });

        invariant(user?.passwordHash, 'user with password hash must be created');

        // Good - verify data that only exists in our database
        expect(await bcrypt.compare(password, user.passwordHash)).toBe(true);
      });

      // Good - test error cases
      test('it returns an error if a user with that email already exists', async () => {
        await using handle = await createTestDB();
        
        const { db } = handle;
        
        const { caller } = setupTest({ db });

        // create an initial user
        await caller.createUser({
          email: 'user@test.com',
          name: 'Test User',
          username: 'test_user',
          password: 'password123',
        });

        // try to create another user with the same email
        await expect(caller.createUser({
          email: 'user@test.com',
          name: 'Another User',
          username: 'another_user',
          password: 'password456',
        })).rejects.toMatchObject({
          code: 'CONFLICT',
          message: 'User already exists with the provided email',
        });
      });
      ```
    output: "Service tests following standards"

metadata:
  priority: high
  version: 1.0
</rule>
