type AuthPayload {
  accessToken: String!
  refreshToken: String!
  session: Session!
}

type Avatar {
  class: AvatarClass!
  createdAt: DateTime!
  id: ID!
  level: Int!
  name: String!
  user: User!
  xp: Int!
}

enum AvatarClass {
  Brute
  Scholar
  Scoundrel
}

input ChangeUserPasswordInput {
  currentPassword: String!
  newPassword: String!
  transactionToken: String
}

union ChangeUserPasswordPayload = MutationErrorPayload | MutationSuccess

input CreateAvatarInput {
  class: AvatarClass!
  name: String!
}

union CreateAvatarPayload = Avatar | MutationErrorPayload

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeleteAvatarInput {
  id: String!
}

union DeleteAvatarPayload = MutationErrorPayload | MutationSuccess

input DeleteSessionInput {
  id: String!
}

union DeleteSessionPayload = MutationErrorPayload | MutationSuccess

input FinishChangeUserEmailInput {
  email: String!
  transactionToken: String!
}

union FinishChangeUserEmailPayload = MutationErrorPayload | MutationSuccess

input FinishDisable2FAInput {
  transactionToken: String!
}

union FinishDisable2FAPayload = MutationErrorPayload | MutationSuccess

input FinishEmailSignupInput {
  email: String!
  name: String!
  password: String!
  rememberMe: Boolean!
  transactionToken: String!
  username: String!
}

union FinishEmailSignupPayload = AuthPayload | MutationErrorPayload

input FinishEnable2FAInput {
  transactionToken: String!
}

union FinishEnable2FAPayload = MutationErrorPayload | MutationSuccess

input FinishLoginWith2FAInput {
  target: String!
  transactionToken: String!
}

union FinishLoginWith2FAPayload = AuthPayload | ForceLogoutPayload | MutationErrorPayload

input FinishPasswordResetInput {
  email: String!
  password: String!
  resetToken: String!
  transactionToken: String
}

union FinishPasswordResetPayload = MutationErrorPayload | MutationSuccess

type ForceLogoutPayload {
  sessionID: String!
  transactionToken: String!
}

input GetAvatarInput {
  id: String!
}

input GetAvatarsInput {
  placeholder: String
}

input GetSessionsInput {
  placeholder: String
}

input LoginWithForcedLogoutInput {
  target: String!
  transactionToken: String!
}

union LoginWithForcedLogoutPayload = AuthPayload | MutationErrorPayload

input LoginWithPasswordInput {
  email: String!
  password: String!
  rememberMe: Boolean!
}

union LoginWithPasswordPayload = AuthPayload | ForceLogoutPayload | MutationErrorPayload | TwoFactorLoginPayload

type Mutation {
  changeUserPassword(input: ChangeUserPasswordInput!): ChangeUserPasswordPayload!
  createAvatar(input: CreateAvatarInput!): CreateAvatarPayload!
  deleteAvatar(input: DeleteAvatarInput!): DeleteAvatarPayload!
  deleteSession(input: DeleteSessionInput!): DeleteSessionPayload!
  finishChangeUserEmail(input: FinishChangeUserEmailInput!): FinishChangeUserEmailPayload!
  finishDisable2FA(input: FinishDisable2FAInput!): FinishDisable2FAPayload!
  finishEmailSignup(input: FinishEmailSignupInput!): FinishEmailSignupPayload!
  finishEnable2FA(input: FinishEnable2FAInput!): FinishEnable2FAPayload!
  finishLoginWith2FA(input: FinishLoginWith2FAInput!): FinishLoginWith2FAPayload!
  finishPasswordReset(input: FinishPasswordResetInput!): FinishPasswordResetPayload!
  loginWithForcedLogout(input: LoginWithForcedLogoutInput!): LoginWithForcedLogoutPayload!
  loginWithPassword(input: LoginWithPasswordInput!): LoginWithPasswordPayload!
  refreshAccessToken(input: RefreshAccessTokenInput!): RefreshAccessTokenPayload!
  startChangeUserEmail(input: StartChangeUserEmailInput!): StartChangeUserEmailPayload!
  startEmailSignup(input: StartEmailSignupInput!): StartEmailSignupPayload!
  startEnable2FA(input: StartEnable2FAInput!): StartEnable2FAPayload!
  startPasswordReset(input: StartPasswordResetInput!): StartPasswordResetPayload!
  startStepUpAuth(input: StartStepUpAuthInput!): StartStepUpAuthPayload!
  updateAvatar(input: UpdateAvatarInput!): UpdateAvatarPayload!
  verifyOTP(input: VerifyOTPInput!): VerifyOTPPayload!
}

type MutationError {
  message: String!
  title: String!
}

type MutationErrorPayload {
  error: MutationError!
}

type MutationSuccess {
  success: Boolean!
}

type Query {
  getAvatar(input: GetAvatarInput!): Avatar
  getAvatars(input: GetAvatarsInput!): [Avatar!]!
  getCurrentUser: User!
  getEnable2FAVerification: TwoFactorVerification!
  getSessions(input: GetSessionsInput!): [Session!]!
}

input RefreshAccessTokenInput {
  refreshToken: String!
}

union RefreshAccessTokenPayload = MutationErrorPayload | TokenPayload

type Session {
  createdAt: DateTime!
  expiresAt: DateTime!
  id: ID!
  user: User!
}

input StartChangeUserEmailInput {
  email: String!
  transactionToken: String
}

union StartChangeUserEmailPayload = MutationErrorPayload | VerificationRequiredPayload

input StartEmailSignupInput {
  email: String!
}

union StartEmailSignupPayload = MutationErrorPayload | VerificationRequiredPayload

input StartEnable2FAInput {
  placeholder: String
}

union StartEnable2FAPayload = MutationErrorPayload | VerificationRequiredPayload

input StartPasswordResetInput {
  email: String!
}

union StartPasswordResetPayload = MutationErrorPayload | MutationSuccess | VerificationRequiredPayload

input StartStepUpAuthInput {
  action: StepUpAction!
}

union StartStepUpAuthPayload = MutationErrorPayload | VerificationRequiredPayload

enum StepUpAction {
  CHANGE_EMAIL
  CHANGE_PASSWORD
  DISABLE_2FA
}

type TokenPayload {
  accessToken: String!
  refreshToken: String!
}

type TwoFactorLoginPayload {
  sessionID: String!
  transactionID: String!
}

type TwoFactorSuccessPayload {
  transactionToken: String!
}

type TwoFactorVerification {
  otpURI: String!
}

input UpdateAvatarInput {
  id: String!
  name: String!
}

union UpdateAvatarPayload = MutationErrorPayload | MutationSuccess

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  is2FAEnabled: Boolean!
  name: String!
  updatedAt: DateTime!
  username: String!
}

type VerificationRequiredPayload {
  transactionID: String!
}

enum VerificationType {
  CHANGE_EMAIL
  CHANGE_EMAIL_CONFIRMATION
  CHANGE_PASSWORD
  ONBOARDING
  RESET_PASSWORD
  TWO_FACTOR_AUTH
  TWO_FACTOR_AUTH_DISABLE
  TWO_FACTOR_AUTH_SETUP
}

input VerifyOTPInput {
  code: String!
  sessionID: String
  target: String!
  transactionID: String!
  type: VerificationType!
}

union VerifyOTPPayload = MutationErrorPayload | TwoFactorSuccessPayload