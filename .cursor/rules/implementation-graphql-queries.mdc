---
description: GraphQL Query Implementation Standards using Pothos
globs: "**/schema/queries/**/*.ts"
alwaysApply: false
---

# GraphQL Query Implementation Standards

Standards for implementing GraphQL queries using Pothos Schema Builder.

<rule>
name: implementation_standards_graphql_queries
description: Standards for implementing GraphQL queries
filters:
  - type: file_path
    pattern: ".*/schema/queries/.*\\.ts$"
  - type: file_path
    pattern: "!.*\\.test\\.ts$"

actions:
  - type: suggest
    message: |
      GraphQL Query Implementation Standards:

      1. File Organization:
         - Place queries in `schema/queries/` directory
         - Use kebab-case for filenames matching the operation (e.g. `get-user.ts`)
         - Co-locate test files with queries
         - One query per file
         - Export queries from index files

      2. Input Types:
         - All queries must have an input type, even for simple operations
         - Name input types as `OperationNameInput` (e.g. `GetUserInput`)
         - Use `t.string()`, `t.boolean()`, etc. for scalar fields
         - Mark required fields using `required: true`
         - Use TypeScript inference via `$inferInput`
         - For queries with no parameters, use an empty input type

      3. Return Types:
         - Return domain types directly (no union types)
         - Use array types for list queries (e.g. `[User]`)
         - Use nullable types when appropriate
         - Use TypeScript inference via `$inferType`
         - Throw errors instead of returning error types

      4. Resolver Implementation:
         - Export standalone async resolver function
         - Export wrapped resolver function
         - Accept standard resolver parameters (`parent`, `args`, `ctx`)
         - Use service layer methods from `ctx.services`
         - Handle all known error cases with throws
         - Add TODO comment for Sentry error capture
         - Never expose raw error messages in responses

      5. Context Usage:
         - Access services via `ctx.services`
         - Access request data via `ctx.request`
         - Access auth data via `ctx.user`
         - Document required context properties
         - Use type-safe context access

      6. Documentation:
         - Include JSDoc documentation for queries
         - Document permissions using `@permission`
         - Include usage example in documentation
         - Document error cases
         - Follow example format below

      7. Authorization:
         - Use authorization wrapper functions
         - Available wrappers:
           - `requireAuth` - Requires authenticated user

examples:
  - input: |
      ```ts
      import { captureException } from '@sentry/node';
      import invariant from 'tiny-invariant';
      import type { Context } from '~/types';
      import { builder } from '../builder';
      import { World } from '../types/world';
      import { requireAuth } from '../utils/require-auth';

      /**
       * @description Returns all worlds owned by the authenticated user
       * 
       * @permission authenticated - Requires user to be logged in
       * 
       * @example
       * ```gql
       * query GetWorlds {
       *   getWorlds(input: {}) {
       *     id
       *     name
       *     fantasyType
       *     technologyLevel
       *     archetype
       *     atmosphere
       *     population
       *     geographyType
       *     geographyFeatures
       *     createdAt
       *     updatedAt
       *   }
       * }
       * ```
       */

      interface Args {
        input: typeof GetWorldsInput.$inferInput;
      };

      export async function getWorlds(
        _: object,
        args: Args,
        ctx: AuthedContext,
      ): Promise<Array<typeof World.$inferType>> {
        try {
          const worlds = await ctx.services.world.getWorlds({
            ownerID: ctx.user.id,
          });

          return worlds;
        } catch (error: unknown) {
          // Good - log & capture errors
          if (error instanceof Error) {
            captureException(error);
            logger.error(error.message);
          }

          // Good - don't leak our unhandled errors
          throw new GraphQLError('An unknown error occurred', {
            extensions: {
              code: 'INTERNAL_SERVER_ERROR',
            },
          });
        }
      }

      // Good - empty input type for queries with no parameters
      const GetWorldsInput = builder.inputType('GetWorldsInput', {
        fields: (t) => ({
          placeholder: t.string({ required: false }),
        }),
      });

      // Good - export the wrapped resolver for testing
      export const resolve = requireAuth(getWorlds);

      builder.queryField('getWorlds', (t) =>
        t.field({
          type: [World],
          args: {
            input: t.arg({ type: GetWorldsInput, required: true }),
          },
          resolve,
        }),
      );
      ```
    output: "GraphQL query following implementation standards"

metadata:
  priority: high
  version: 1.0
</rule> 